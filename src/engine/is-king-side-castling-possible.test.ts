import { expect, test } from "vitest";
import { Board, King, Piece, STARTING_BOARD } from "./pieces";
import { Doc, Id } from "../../convex/_generated/dataModel";
import { isKingSideCastlingPossible } from "./is-king-side-castling-possible";

const game: Doc<"games"> = {
  _id: "" as Id<"games">,
  _creationTime: 0,
  board: STARTING_BOARD,
  players: [],
  turn: 1,
  state: "playing",
  history: [],
};

test("starting position", () => {
  expect(isKingSideCastlingPossible(game, "k")).toEqual(false);
  expect(isKingSideCastlingPossible(game, "K")).toEqual(false);
});

const valid_cases: [Board, King][] = [
  [
    [
      ["r1", "", "", "k", "", "", "", "r2"],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["R1", "", "", "K", "", "", "", "R2"],
    ],
    "k",
  ],
  [
    [
      ["r1", "", "", "k", "", "", "", "r2"],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["R1", "", "", "K", "", "", "", "R2"],
    ],
    "K",
  ],
  [
    [
      ["r1", "", "", "k", "q", "b2", "n2", "r2"],
      ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
      ["R1", "N1", "B1", "K", "Q", "B2", "N2", "R2"],
    ],
    "k",
  ],
  [
    [
      ["r1", "n1", "b1", "k", "q", "b2", "n2", "r2"],
      ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
      ["R1", "", "", "K", "Q", "B2", "N2", "R2"],
    ],
    "K",
  ],
];

test.each(valid_cases)("King side castling is possible", (board, king) => {
  expect(isKingSideCastlingPossible({ ...game, board }, king)).toEqual(true);
});

const invalid_cases: [
  Board,
  King,
  { piece: Piece; from: [number, number]; to: [number, number] }[],
][] = [
  [
    [
      ["r1", "", "b1", "k", "", "", "", "r2"],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["R1", "", "", "K", "", "", "", "R2"],
    ],
    "k",
    [],
  ],
  [
    [
      ["r1", "", "", "k", "", "", "", "r2"],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["R1", "", "", "", "", "", "", ""],
      ["", "", "", "K", "", "", "", "R2"],
    ],
    "K",
    [{ piece: "R1", from: [7, 0], to: [6, 0] }],
  ],
  [
    [
      ["", "", "", "k", "", "", "", "r2"],
      ["r1", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["R1", "", "", "K", "", "", "", "R2"],
    ],
    "k",
    [{ piece: "r1", from: [0, 0], to: [1, 0] }],
  ],
  [
    [
      ["r1", "", "", "k", "", "", "", "r2"],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "Q", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["R1", "", "", "K", "", "", "", "R2"],
    ],
    "k",
    [],
  ],
  [
    [
      ["r1", "", "", "k", "", "", "", "r2"],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "Q", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "q", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["R1", "", "", "K", "", "", "", "R2"],
    ],
    "K",
    [],
  ],
];

test.each(invalid_cases)(
  "King side castling is not possible",
  (board, king, history) => {
    expect(
      isKingSideCastlingPossible({ ...game, board, history }, king)
    ).toEqual(false);
  }
);
