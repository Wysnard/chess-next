import { expect, test, describe } from "vitest";
import { Piece, STARTING_BOARD } from "./pieces";
import { move } from "./move";
import { Doc, Id } from "../../convex/_generated/dataModel";

const game: Doc<"games"> = {
  _id: "" as Id<"games">,
  _creationTime: 0,
  board: STARTING_BOARD,
  players: [],
  turn: 0,
  state: "playing",
  history: [],
};

test("starting position", () => {
  expect(move(game, "p4", [2, 3])).toMatchObject({
    board: [
      ["r1", "n1", "b1", "k", "q", "b2", "n2", "r2"],
      ["p1", "p2", "p3", "", "p5", "p6", "p7", "p8"],
      ["", "", "", "p4", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", ""],
      ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
      ["R1", "N1", "B1", "K", "Q", "B2", "N2", "R2"],
    ],
    turn: 1,
  });
});

const valid_moves: [
  string,
  Doc<"games">,
  Piece,
  [number, number],
  Doc<"games">,
][] = [
  [
    "white king side castle",
    {
      ...game,
      board: [
        ["r1", "", "", "k", "q", "b2", "n2", "r2"],
        ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
        ["R1", "N1", "B1", "K", "Q", "B2", "N2", "R2"],
      ],
    },
    "k",
    [0, 1],
    {
      ...game,
      turn: 1,
      board: [
        ["", "k", "r1", "", "q", "b2", "n2", "r2"],
        ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
        ["R1", "N1", "B1", "K", "Q", "B2", "N2", "R2"],
      ],
      history: [
        {
          piece: "k",
          from: [0, 3],
          to: [0, 1],
        },
      ],
    },
  ],
  [
    "white queen side castle",
    {
      ...game,
      board: [
        ["r1", "n1", "b1", "k", "", "", "", "r2"],
        ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
        ["R1", "N1", "B1", "K", "Q", "B2", "N2", "R2"],
      ],
    },
    "k",
    [0, 5],
    {
      ...game,
      turn: 1,
      board: [
        ["r1", "n1", "b1", "", "r2", "k", "", ""],
        ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
        ["R1", "N1", "B1", "K", "Q", "B2", "N2", "R2"],
      ],
      history: [
        {
          piece: "k",
          from: [0, 3],
          to: [0, 5],
        },
      ],
    },
  ],
  [
    "black king side castle",
    {
      ...game,
      board: [
        ["r1", "n1", "b1", "k", "q", "b2", "n2", "r2"],
        ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
        ["R1", "", "", "K", "Q", "B2", "N2", "R2"],
      ],
    },
    "K",
    [7, 1],
    {
      ...game,
      turn: 1,
      board: [
        ["r1", "n1", "b1", "k", "q", "b2", "n2", "r2"],
        ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
        ["", "K", "R1", "", "Q", "B2", "N2", "R2"],
      ],
      history: [
        {
          piece: "K",
          from: [7, 3],
          to: [7, 1],
        },
      ],
    },
  ],
  [
    "black queen side castle",
    {
      ...game,
      board: [
        ["r1", "n1", "b1", "k", "q", "b2", "n2", "r2"],
        ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
        ["R1", "N1", "B1", "K", "", "", "", "R2"],
      ],
    },
    "K",
    [7, 5],
    {
      ...game,
      turn: 1,
      board: [
        ["r1", "n1", "b1", "k", "q", "b2", "n2", "r2"],
        ["p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8"],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["", "", "", "", "", "", "", ""],
        ["P1", "P2", "P3", "P4", "P5", "P6", "P7", "P8"],
        ["R1", "N1", "B1", "", "R2", "K", "", ""],
      ],
      history: [
        {
          piece: "K",
          from: [7, 3],
          to: [7, 5],
        },
      ],
    },
  ],
];

describe("valid moves", () => {
  test.each(valid_moves)(
    "%s",
    (testname, game, piece, [row, col], expectedGame) => {
      const result = move(game, piece, [row, col]);
      expect(result).toMatchObject(expectedGame);
    }
  );
});
